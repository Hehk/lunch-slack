// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Micro = require("micro");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

var Response = /* module */[];

function text(limit, encoding, req) {
  var options = {
    limit: Js_null_undefined.fromOption(limit),
    encoding: Js_null_undefined.fromOption(encoding)
  };
  return Micro.text(req, options);
}

function getPath(req) {
  var match = req.url;
  if (match !== undefined) {
    switch (match) {
      case "" : 
      case "/" : 
          return /* [] */0;
      default:
        var raw = match.slice(1);
        var match$1 = raw[raw.length - 1 | 0];
        var raw$1 = match$1 === "/" ? raw.slice(0, -1) : raw;
        return $$Array.to_list(raw$1.split("/"));
    }
  } else {
    return /* [] */0;
  }
}

function getMethod(req) {
  var match = req.method;
  if (match !== undefined) {
    switch (match) {
      case "Delete" : 
          return /* Delete */4;
      case "GET" : 
          return /* Get */0;
      case "Head" : 
          return /* Head */5;
      case "Options" : 
          return /* Options */6;
      case "POST" : 
          return /* Post */1;
      case "Patch" : 
          return /* Patch */3;
      case "Put" : 
          return /* Put */2;
      default:
        return /* Invalid */7;
    }
  } else {
    return /* Invalid */7;
  }
}

var Request = /* module */[
  /* text */text,
  /* getPath */getPath,
  /* getMethod */getMethod
];

function handleResponse(res, param) {
  Micro.send(res, 200, param[0]);
  return /* () */0;
}

function makeSync(handler, req, res) {
  return handleResponse(res, Curry._1(handler, req));
}

function make(handler, rawReq, res) {
  var request_000 = /* path */getPath(rawReq);
  var request_001 = /* meth */getMethod(rawReq);
  var request = /* record */[
    request_000,
    request_001
  ];
  Curry._1(handler, request).then((function (value) {
          handleResponse(res, value);
          return Promise.resolve(/* () */0);
        }));
  return undefined;
}

exports.Response = Response;
exports.Request = Request;
exports.handleResponse = handleResponse;
exports.makeSync = makeSync;
exports.make = make;
/* micro Not a pure module */
